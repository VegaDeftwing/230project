# Reading C:/altera/11.1/modelsim_ase/tcl/vsim/pref.tcl 
# do Processor_run_msim_gate_vhdl.do 
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Copying c:\altera\11.1\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied c:\altera\11.1\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {Processor.vho}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package VITAL_Timing
# -- Loading package VITAL_Primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity processor
# -- Compiling architecture structure of processor
# 
# do "C:/Users/Zed/Desktop/CSCE230/230project/project/phaseII.do"
# vsim processor
# vsim processor 
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processor(structure)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# ** Warning: Design size of 1 instances exceeds ModelSim ALTERA recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim Altera version. Expect performance to be adversely affected.
# 
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# 
# 
# add wave reset
# add wave clock
# add wave instruction
# add wave InR 
# add wave opCode
# add wave Cond 
# add wave S 
# add wave opx
# add wave ir_enable
# add wave ma_select
# add wave mem_read
# add wave mem_write
# add wave pc_select
# add wave pc_enable
# add wave inc_select
# add wave extend
# add wave y_select
# add wave c_select
# add wave rf_write
# add wave b_select
# add wave a_inv
# add wave b_inv
# add wave alu_op
# add wave N
# add wave C
# add wave V
# add wave Z
# add wave mfc 
# add wave A
# add wave B
# add wave ALU_out 
# add wave RegD
# add wave RegT
# add wave RegS
# add wave DataD 
# add wave DataS
# add wave DataT 
# add wave DataA 	
# add wave DataB 
# add wave DataM 
# add wave DataY 
# add wave DataZ 
# add wave enablePS 
# add wave immediateB 
# add wave muxBout 
# add wave memIn 
# add wave ReturnAddress 
# add wave muxYout 
# add wave Nout
# add wave Cout
# add wave Vout
# add wave Zout
# 
# force reset 0 0
# force clock 0 0, 1 10  -repeat 20
# 
# force instruction 000000000100000100100011 0, 000000001100000100100011 100, 000000000011000100100011 200, 000000000011010001010110 300,  000000010111011110001001 400, 001011111000101010110000 500 -repeat 600
# 
# 
# 
# 
# run 1200
#  
