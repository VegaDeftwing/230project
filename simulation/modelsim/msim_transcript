# Reading C:/altera/11.1/modelsim_ase/tcl/vsim/pref.tcl 
# do Processor_run_msim_gate_vhdl.do 
# if {[file exists gate_work]} {
# 	vdel -lib gate_work -all
# }
# vlib gate_work
# vmap work gate_work
# Copying c:\altera\11.1\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied c:\altera\11.1\modelsim_ase\win32aloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {Processor.vho}
# Model Technology ModelSim ALTERA vcom 10.0c Compiler 2011.09 Sep 21 2011
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Loading package VITAL_Timing
# -- Loading package VITAL_Primitives
# -- Loading package cycloneii_atom_pack
# -- Loading package cycloneii_components
# -- Compiling entity processor
# -- Compiling architecture structure of processor
# 
# do "C:/Users/Zed/Desktop/CSCE230/230project/project/phaseII.do"
# vsim processor
# vsim processor 
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading ieee.vital_timing(body)
# Loading ieee.vital_primitives(body)
# Loading cycloneii.cycloneii_atom_pack(body)
# Loading cycloneii.cycloneii_components
# Loading work.processor(structure)
# Loading cycloneii.cycloneii_lcell_comb(vital_lcell_comb)
# Loading cycloneii.cycloneii_lcell_ff(vital_lcell_ff)
# Loading cycloneii.cycloneii_and1(altvital)
# Loading ieee.std_logic_arith(body)
# Loading cycloneii.cycloneii_io(structure)
# Loading cycloneii.cycloneii_mux21(altvital)
# Loading cycloneii.cycloneii_dffe(behave)
# Loading cycloneii.cycloneii_asynch_io(behave)
# Loading cycloneii.cycloneii_clkctrl(vital_clkctrl)
# Loading cycloneii.cycloneii_ena_reg(behave)
# ** Warning: Design size of 1 instances exceeds ModelSim ALTERA recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim Altera version. Expect performance to be adversely affected.
# 
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# 
# 
# add wave reset
# add wave clock
# add wave instruction
# add wave ir_enable_Output
# add wave mem_read_Output
# add wave y_select_Output
# add wave c_select_Output
# add wave rf_write_Output
# add wave b_select_Output
# add wave a_inv_Output
# add wave b_inv_Output
# add wave alu_op_Output
# add wave N_Output
# add wave C_Output
# add wave V_Output
# add wave Z_Output
# add wave ALU_out_Output
# add wave RegD_Output
# add wave RegT_Output
# add wave RegS_Output
# add wave DataD_Output 
# add wave DataS_Output
# add wave DataT_Output 
# add wave DataA_Output	
# add wave DataB_Output 
# add wave DataM_Output  
# add wave DataZ_Output 
# add wave immediateB_Output 
# add wave ReturnAddress_Output  
#  
# force reset 0 0
# force clock 0 0, 1 10  -repeat 20
# 
# force instruction 000000000100000000000000 0, 16#600410 110, 000000000111000000000000 210, 000000000110000000000000 310, 000000000101000000000000 410, 000000000100000100100011 510, 000000000011000100100011 610, 000000000111000100100011 710, 000000000110000100100011 810, 000000000101000100100011 910, 000000001100000000000000 1010, 000000010100000000000000 1110,  000000100100000100100011 1210, 000000101100000100100011 1310, 000000000100000000000000 1410, 000000000100000100010001 1510, 000000000100000000000000 1610 -repeat 1710
# 
# 
# 
# 
# run 1710
#  
